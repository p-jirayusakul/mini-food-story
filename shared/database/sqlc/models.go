// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PaymentStatus string

const (
	PaymentStatusPending  PaymentStatus = "pending"
	PaymentStatusPaid     PaymentStatus = "paid"
	PaymentStatusFailed   PaymentStatus = "failed"
	PaymentStatusRefunded PaymentStatus = "refunded"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type TableSessionStatus string

const (
	TableSessionStatusActive  TableSessionStatus = "active"
	TableSessionStatusClosed  TableSessionStatus = "closed"
	TableSessionStatusExpired TableSessionStatus = "expired"
)

func (e *TableSessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TableSessionStatus(s)
	case string:
		*e = TableSessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TableSessionStatus: %T", src)
	}
	return nil
}

type NullTableSessionStatus struct {
	TableSessionStatus TableSessionStatus `json:"table_session_status"`
	Valid              bool               `json:"valid"` // Valid is true if TableSessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTableSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TableSessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TableSessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTableSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TableSessionStatus), nil
}

type MdCategory struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	NameEn    string             `json:"name_en"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type MdOrderStatus struct {
	ID        int64              `json:"id"`
	Code      string             `json:"code"`
	Name      string             `json:"name"`
	NameEn    string             `json:"name_en"`
	SortOrder int32              `json:"sort_order"`
	IsFinal   bool               `json:"is_final"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type MdTableStatus struct {
	ID        int64              `json:"id"`
	Code      string             `json:"code"`
	Name      string             `json:"name"`
	NameEn    string             `json:"name_en"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Order struct {
	ID          int64              `json:"id"`
	OrderNumber string             `json:"order_number"`
	SessionID   pgtype.UUID        `json:"session_id"`
	TableID     int64              `json:"table_id"`
	StatusID    int64              `json:"status_id"`
	TotalAmount pgtype.Numeric     `json:"total_amount"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type OrderItem struct {
	ID            int64          `json:"id"`
	OrderID       int64          `json:"order_id"`
	ProductID     int64          `json:"product_id"`
	StatusID      int64          `json:"status_id"`
	ProductName   string         `json:"product_name"`
	ProductNameEn string         `json:"product_name_en"`
	Price         pgtype.Numeric `json:"price"`
	Quantity      int32          `json:"quantity"`
	Note          pgtype.Text    `json:"note"`
	// เวลาที่ทำอาหารเสร็จ
	PreparedAt pgtype.Timestamptz `json:"prepared_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type OrderSequence struct {
	OrderDate     pgtype.Date `json:"order_date"`
	CurrentNumber int32       `json:"current_number"`
}

type Payment struct {
	ID            int64              `json:"id"`
	OrderID       int64              `json:"order_id"`
	Amount        pgtype.Numeric     `json:"amount"`
	Method        int64              `json:"method"`
	Status        NullPaymentStatus  `json:"status"`
	PaidAt        pgtype.Timestamptz `json:"paid_at"`
	TransactionID string             `json:"transaction_id"`
	RefCode       string             `json:"ref_code"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	Note          pgtype.Text        `json:"note"`
}

type PaymentMethod struct {
	ID        int64              `json:"id"`
	Code      string             `json:"code"`
	Name      string             `json:"name"`
	NameEn    string             `json:"name_en"`
	Enable    bool               `json:"enable"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Product struct {
	ID          int64              `json:"id"`
	Name        string             `json:"name"`
	NameEn      string             `json:"name_en"`
	Categories  int64              `json:"categories"`
	Description pgtype.Text        `json:"description"`
	Price       pgtype.Numeric     `json:"price"`
	IsAvailable bool               `json:"is_available"`
	ImageUrl    pgtype.Text        `json:"image_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Table struct {
	ID          int64              `json:"id"`
	TableNumber int32              `json:"table_number"`
	StatusID    int64              `json:"status_id"`
	Seats       int32              `json:"seats"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type TableSession struct {
	ID             int64                  `json:"id"`
	TableID        int64                  `json:"table_id"`
	SessionID      pgtype.UUID            `json:"session_id"`
	NumberOfPeople int32                  `json:"number_of_people"`
	Status         NullTableSessionStatus `json:"status"`
	StartedAt      pgtype.Timestamptz     `json:"started_at"`
	ExpireAt       pgtype.Timestamptz     `json:"expire_at"`
	EndedAt        pgtype.Timestamptz     `json:"ended_at"`
}
