// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: md_order_statuses.sql

package database

import (
	"context"
)

const getOrderStatusPreparing = `-- name: GetOrderStatusPreparing :one
SELECT id FROM public.md_order_statuses WHERE code = 'PREPARING' LIMIT 1
`

func (q *Queries) GetOrderStatusPreparing(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOrderStatusPreparing)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const isOrderStatusExist = `-- name: IsOrderStatusExist :one
SELECT (COUNT(id) > 0)  as isExist FROM public.md_order_statuses WHERE code = $1::varchar
`

func (q *Queries) IsOrderStatusExist(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRow(ctx, isOrderStatusExist, code)
	var isexist bool
	err := row.Scan(&isexist)
	return isexist, err
}

const isOrderStatusFinal = `-- name: IsOrderStatusFinal :one
SELECT COUNT(id) > 0 as "isFinal" FROM public.md_order_statuses WHERE code = $1::varchar AND is_final IS TRUE LIMIT 1
`

func (q *Queries) IsOrderStatusFinal(ctx context.Context, code string) (bool, error) {
	row := q.db.QueryRow(ctx, isOrderStatusFinal, code)
	var isFinal bool
	err := row.Scan(&isFinal)
	return isFinal, err
}

const listOrderStatus = `-- name: ListOrderStatus :many
SELECT id, code, "name", name_en
FROM public.md_order_statuses order by sort_order ASC
`

type ListOrderStatusRow struct {
	ID     int64  `json:"id"`
	Code   string `json:"code"`
	Name   string `json:"name"`
	NameEn string `json:"name_en"`
}

func (q *Queries) ListOrderStatus(ctx context.Context) ([]*ListOrderStatusRow, error) {
	rows, err := q.db.Query(ctx, listOrderStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListOrderStatusRow{}
	for rows.Next() {
		var i ListOrderStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.NameEn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
