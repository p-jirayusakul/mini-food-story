// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
insert into public.payments (id, order_id, amount, method, status, transaction_id, ref_code, note)
values ($1::bigint, $2::bigint, $3::numeric, $4::bigint, $5::bigint, $6::text, $7::varchar, $8::text)
RETURNING id
`

type CreatePaymentParams struct {
	ID            int64          `json:"id"`
	OrderID       int64          `json:"order_id"`
	Amount        pgtype.Numeric `json:"amount"`
	Method        int64          `json:"method"`
	Status        int64          `json:"status"`
	TransactionID string         `json:"transaction_id"`
	RefCode       string         `json:"ref_code"`
	Note          pgtype.Text    `json:"note"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.Amount,
		arg.Method,
		arg.Status,
		arg.TransactionID,
		arg.RefCode,
		arg.Note,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPaymentAmountByTransaction = `-- name: GetPaymentAmountByTransaction :one
SELECT amount::numeric FROM public.payments WHERE transaction_id =$1::text LIMIT 1
`

func (q *Queries) GetPaymentAmountByTransaction(ctx context.Context, transactionID string) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getPaymentAmountByTransaction, transactionID)
	var amount pgtype.Numeric
	err := row.Scan(&amount)
	return amount, err
}

const getPaymentLastStatusCodeByTransaction = `-- name: GetPaymentLastStatusCodeByTransaction :one
select mps.code from public.payments as p
LEFT JOIN public.md_payment_statuses as mps ON mps.id = p.status
where p.transaction_id=$1
limit 1
`

func (q *Queries) GetPaymentLastStatusCodeByTransaction(ctx context.Context, transactionID string) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getPaymentLastStatusCodeByTransaction, transactionID)
	var code pgtype.Text
	err := row.Scan(&code)
	return code, err
}

const getPaymentOrderIDByTransaction = `-- name: GetPaymentOrderIDByTransaction :one
SELECT order_id as "orderID" FROM public.payments WHERE transaction_id =$1::text LIMIT 1
`

func (q *Queries) GetPaymentOrderIDByTransaction(ctx context.Context, transactionID string) (int64, error) {
	row := q.db.QueryRow(ctx, getPaymentOrderIDByTransaction, transactionID)
	var orderID int64
	err := row.Scan(&orderID)
	return orderID, err
}

const updateStatusPaymentCancelledByTransactionID = `-- name: UpdateStatusPaymentCancelledByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'CANCELLED'), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentCancelledByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentCancelledByTransactionID, transactionID)
	return err
}

const updateStatusPaymentConfirmedByTransactionID = `-- name: UpdateStatusPaymentConfirmedByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'CONFIRMED'), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentConfirmedByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentConfirmedByTransactionID, transactionID)
	return err
}

const updateStatusPaymentFailedByTransactionID = `-- name: UpdateStatusPaymentFailedByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'FAILED'), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentFailedByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentFailedByTransactionID, transactionID)
	return err
}

const updateStatusPaymentPendingByTransactionID = `-- name: UpdateStatusPaymentPendingByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'PENDING'), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentPendingByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentPendingByTransactionID, transactionID)
	return err
}

const updateStatusPaymentSuccessByTransactionID = `-- name: UpdateStatusPaymentSuccessByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'SUCCESS'), paid_at=NOW(), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentSuccessByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentSuccessByTransactionID, transactionID)
	return err
}

const updateStatusPaymentTimeOutByTransactionID = `-- name: UpdateStatusPaymentTimeOutByTransactionID :exec
UPDATE public.payments
SET status=(select id from public.md_payment_statuses WHERE code = 'TIMEOUT'), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentTimeOutByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentTimeOutByTransactionID, transactionID)
	return err
}
