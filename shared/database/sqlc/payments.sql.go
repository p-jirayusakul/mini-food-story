// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO public.payments
(id, order_id, amount, "method", transaction_id, ref_code, note)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreatePaymentParams struct {
	ID            int64          `json:"id"`
	OrderID       int64          `json:"order_id"`
	Amount        pgtype.Numeric `json:"amount"`
	Method        int64          `json:"method"`
	TransactionID string         `json:"transaction_id"`
	RefCode       string         `json:"ref_code"`
	Note          pgtype.Text    `json:"note"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (int64, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.Amount,
		arg.Method,
		arg.TransactionID,
		arg.RefCode,
		arg.Note,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPaymentOrderIDByTransaction = `-- name: GetPaymentOrderIDByTransaction :one
SELECT order_id as "orderID" FROM public.payments WHERE transaction_id =$1::text LIMIT 1
`

func (q *Queries) GetPaymentOrderIDByTransaction(ctx context.Context, transactionID string) (int64, error) {
	row := q.db.QueryRow(ctx, getPaymentOrderIDByTransaction, transactionID)
	var orderID int64
	err := row.Scan(&orderID)
	return orderID, err
}

const updateStatusPaymentFail = `-- name: UpdateStatusPaymentFail :exec
UPDATE public.payments
SET status='failed'::payment_status, paid_at=NULL, updated_at=NOW()
WHERE id=$1::bigint
`

func (q *Queries) UpdateStatusPaymentFail(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentFail, id)
	return err
}

const updateStatusPaymentPaidByID = `-- name: UpdateStatusPaymentPaidByID :exec
UPDATE public.payments
SET status='paid'::payment_status, paid_at=NOW(), updated_at=NOW()
WHERE id=$1::bigint
`

func (q *Queries) UpdateStatusPaymentPaidByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentPaidByID, id)
	return err
}

const updateStatusPaymentPaidByTransactionID = `-- name: UpdateStatusPaymentPaidByTransactionID :exec
UPDATE public.payments
SET status='paid'::payment_status, paid_at=NOW(), updated_at=NOW()
WHERE transaction_id=$1::text
`

func (q *Queries) UpdateStatusPaymentPaidByTransactionID(ctx context.Context, transactionID string) error {
	_, err := q.db.Exec(ctx, updateStatusPaymentPaidByTransactionID, transactionID)
	return err
}
