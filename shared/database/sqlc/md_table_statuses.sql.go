// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: md_table_statuses.sql

package database

import (
	"context"
)

const createTableStatus = `-- name: CreateTableStatus :one
INSERT INTO public.md_table_statuses(
    id, code, name, name_en)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTableStatusParams struct {
	ID     int64  `json:"id"`
	Code   string `json:"code"`
	Name   string `json:"name"`
	NameEn string `json:"name_en"`
}

func (q *Queries) CreateTableStatus(ctx context.Context, arg CreateTableStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTableStatus,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.NameEn,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listTableStatus = `-- name: ListTableStatus :many
SELECT id, code, name, name_en FROM public.md_table_statuses
ORDER BY id
`

type ListTableStatusRow struct {
	ID     int64  `json:"id"`
	Code   string `json:"code"`
	Name   string `json:"name"`
	NameEn string `json:"name_en"`
}

func (q *Queries) ListTableStatus(ctx context.Context) ([]*ListTableStatusRow, error) {
	rows, err := q.db.Query(ctx, listTableStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListTableStatusRow{}
	for rows.Next() {
		var i ListTableStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.NameEn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
